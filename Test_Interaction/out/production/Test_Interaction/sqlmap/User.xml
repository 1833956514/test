<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
 注意：使用mapper代理方法开发，namespace有特殊重要的作用
 -->
<mapper namespace="test">

    <!-- 在映射文件中配置很多sql语句 -->
    <!-- 通过select执行数据库查询
     id：标识映射文件中的sql，称为statement的id
     将sql语句封装到mapped Statement对象中，所以将id成为statement的id
     parameterType：指定输入参数的类型，这里指定int型
     resultType：指定sql输出结果的所映射的java对象类型，select指定resultType标识将蛋条记录映射成java对象
     #{}标识一个占位符号
     #{value}：其中的id标识接入输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以calue或其他名称

     -->

    <select id="findUserById" parameterType="int" resultType="cn.mybatis.po.User">
        SELECT * FROM USER WHERE id=#{value}
    </select>

    <!-- 根据用户名称模糊查询用户信息，可能返回多条
    resultType：指定就是单挑记录所映射的java对象类型
    ${}：标识拼接sql串，江姐收到参数的内容不加任何的修饰拼接在sql中
    使用${}拼接sql，引起sql注入
    ${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
     -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="cn.mybatis.po.User">
        SELECT * FROM USER WHERE USERNAME LIKE '%${value}%'
    </select>

    <!-- 添加用户
     parameterType：指定输入参数类型是pojo（包括用户信息）
     #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
     -->
    <insert id="insertUser" parameterType="cn.mybatis.po.User">
        <!-- 将插入数据的主键返回，返回到user对象中
        SELECT LAST_INSERT_ID()：德大刚insert进去记录的主键值，只适用于自增主键
        keyProperty：将查询到主键值设置到parameterType制定的对象的哪种属性
        order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说他的执行顺序
        resultType：指定SELECT LAST_INSERT_ID()的结果类型
         -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO USER(username,birthday,sex,address) value(#{username},#{birthday},#{sex},#{address})
    </insert>

    <!-- 删除用户
     根据id删除用户，需要输入id值。
     -->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        DELETE FROM USER WHERE id=#{id}
    </delete>

    <!-- 更新用户
     分析：
     需要传入用户的id
     需要传入用户的更新信息
     parameterType指定user对象，包括id和更新信息，注意id必须存在
     #{id}：从输入user对象中获取id属性值
     -->
    <update id="updateUser" parameterType="cn.mybatis.po.User">
        UPDATE USER SET username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} WHERE id=#{id}
    </update>

</mapper>